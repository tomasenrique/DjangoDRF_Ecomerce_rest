Proyecto usando Django DRF

========================================================================================================================
========================================================================================================================

Video 2

==>> Estructurando el proyecto para mejor funcionsmiento de la API, se divide el archivo settings.py en 3 archivos:
     'base.py', 'local.py' y 'production.py', todas guardadas en la carpteta 'settings' y se realizan las
     configuraciones necesarias.

==>> Se crea la carpeta 'apps' que sera donse de crearan las aplicaciones del proyecto.

==>> Se crea aplicación 'users'

==>> Se crea el modelo para la aplicación y se registra para su gestion en el panel de administración

==>> Se realiza las migraciones necesarias a la base de datos.

==>> Se crea uan cuenta de super usuario del proyecto

==>> Se ejecuta el proyecto.

========================================================================================================================
========================================================================================================================

Video 3

==>> Creando primer serializador y APIVIEW de usuario

==>> Eliminando el archivo 'test.py' de la app users y creando la carpeta 'api' en la app, que sera para almacenar todas
     las rutas y los serializadores

==>> Se crean los archivos 'serializers', 'api' y 'urls', cada una con su respectiva funcion y se realiza el enlace con
     el archivo urls del poyecto

==>> Se realiza pruebas y se obtiene imagenes de muestra

========================================================================================================================
========================================================================================================================

Video 4

==>> Modificando la clase UserApiVew del archivo api.py para poder utilizar funciones para las rutas en lugar de clases
     y para usar el Decorador @API_VIEW

==>> Creando metodo 'user_api_view' y modificando ruta en el archivo 'urls.py'

==>> Realizando pruebas.

========================================================================================================================
========================================================================================================================

Video 5

==>> Agregando registro con @API_VIEW y SERIALIZER

==>> Se configura la función 'user_api_view' para poder insertar registros en la BBDD por medio de POST desde la vista

==>> Se realizan pruebas de validaciones y registros OK

========================================================================================================================
========================================================================================================================

Video 6

==>> DETALLE, UPDATE y DELETE con @api_view

==>> Creando método 'user_detail_view' para configurar métodos HTTP PUT y DELETE

==>> Se agrega ruta en el archivo urls.py con paso de parametro.

==>> Se realizan pruebas OK.


========================================================================================================================
========================================================================================================================

Video 7

==>> Forma correcta de realizar un RESPONSE.

==>> Refactoridar modelos y funciones para optimizar funcionamiento y agregando respuestas http (status)

==>> Agregando codigos de estado a cada función

========================================================================================================================
========================================================================================================================























